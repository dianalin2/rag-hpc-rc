,url,content,title
0,https://learning.rc.virginia.edu/notes/containers/,"Introduction to Building and Deploying Containers

You’ve developed an app and written the paper. Now it’s time to deploy the app so the world (and the reviewers) can see how awesome it is. This is Part 1 of a two-part workshop that will cover how to deploy web apps for publication. In Part 1 we will go over how to containerize our apps with Docker and maintain them with GitHub.

 



 Â©Â 2025 The Rector and Visitors of the University of Virginia 
 

Cite

×

 Copy
 

 Download",containers
1,https://learning.rc.virginia.edu/notes/containers/overview/,"What Are Containers?

Shipping containers are used to transport cargo around the world. In computing, containers allow you to transport and share entire filesystems, processes, scripts, and more!

Next

Why Use Containers?



 Â©Â 2025 The Rector and Visitors of the University of Virginia 
 

Cite

×

 Copy
 

 Download",overview
2,https://learning.rc.virginia.edu/notes/containers/overview-purpose/,"Why Use Containers?

Have you ever tried using new code or software from an exciting paper you just read, only to end up spending hours figuring out which versions of the dependencies work on your own machine? Containers eliminate that issue altogether!

A container is a single unit of software that contains all the packages and code you need to run an application. Sometimes that application is as small as a single function (like printing ‘Hello World!'), and sometimes that application is an entire web app. A container will always run the same, regardless of the host system it runs on–making it the perfect solution for sharing reproducible code.

There are several container technologies out there, but the big ones are Docker and Singularity. Docker is what you will encounter most often in the wild. Singularity (now called Apptainer) is used on HPC systems where most users don’t have root access.",overview-purpose
3,https://learning.rc.virginia.edu/notes/containers/overview-vms/,"Containers vs VMs

You may be familiar with the virtual machines (VMs), which accomplish the same goal as containers: to create a reproducible and shareable compute environment. The big difference between VMs and containers is that VMs provide their own guest OS, whereas containers don’t require an OS and run on the Docker Engine and share the host’s OS kernel.

The size of Docker images is usually on the order of tens of MBs, while VMs can be several tens of GBs large.",overview-vms
4,https://learning.rc.virginia.edu/notes/containers/overview-services/,"Container Services

Container-based architecture, also known as “microservices,” is an approach to designing and running applications as a distributed set of components or layers. Such applications are typically run within containers, made popular in the last few years by Docker.

Containers are portable, efficient, reusable, and contain code and any dependencies in a single package. Containerized services typically run a single process, rather than an entire stack within the same environment. This allows developers to replace, scale, or troubleshoot portions of their entire application at a time.

Research Computing runs microservices in a clustered orchestration environment that automates the deployment and management of many containers easy and scalable. This cluster has >1000 cores and ~1TB of memory allocated to running containerized services. It also has over 300TB of cluster storage and can attach to project and value storage.",overview-services
5,https://learning.rc.virginia.edu/notes/containers/basics/,"Container Basics

To run and build containers, you will need Docker Desktop installed on your local machine. Instructions and installation files can be found here: 
https://docs.docker.com/engine/install/
.

Terminology

Image
: The layers of libraries, code, and configuration that make up the environment that you need to run your application.

Container
: A running instance of an image. You can have many containers of a single image run simultaneously.

DockerHub
: An online registry for Docker images (similar to GitHub)

Commonly Used Docker Commands

docker pull
: Fetches an image from a container registry to your local machine

docker images
: List all locally available images (kind of like ls)

docker run
: Run a container based on a particular image",basics
6,https://learning.rc.virginia.edu/notes/containers/basics-example/,"A Quick Example

Cowsay is a Linux game that prints ASCII art of a cow and a speech bubble containing a string input by the user. The Whalesay image modifies that game by replacing the cow with a whale.

Let’s try pulling the whalesay image from DockerHub and running a container on our machine.

1. Pull the Image

> docker pull docker/whalesay

Using default tag: latest
latest: Pulling from docker/whalesay
Image docker.io/docker/whalesay:latest uses outdated schema1 manifest format. Please upgrade to a schema2 image for better future compatibility. More information at https://docs.docker.com/registry/spec/deprecated-schema-v1/
e190868d63f8: Pull complete 
909cd34c6fd7: Pull complete 
0b9bfabab7c1: Pull complete 
a3ed95caeb02: Pull complete 
00bf65475aba: Pull complete 
c57b6bcc83e3: Pull complete 
8978f6879e2f: Pull complete 
8eed3712d2cf: Pull complete 
Digest: sha256:178598e51a26abbc958b8a2e48825c90bc22e641de3d31e18aaf55f3258ba93b
Status: Downloaded newer image for docker/whalesay:latest
docker.io/docker/whalesay:latest

You’ll notice that there are several lines with a hash/SHA ID followed by “Pull complete”. These correspond to the different layers of the image, or the different components that will make up the compute environment when we run the container. We will talk more about layers when we cover building our own images.

2. List all pulled images

By listing all images, we are confirming that we successfully pulled the whalesay image.

> docker images

REPOSITORY TAG IMAGE ID CREATED SIZE
docker/whalesay latest 6b362a9f73eb 8 years ago 247MB

3. Run the Container

> docker run docker/whalesay

Just running whalesay looks like it didn’t do anything since we didn’t provide a command. What happened behind-the-scenes is that Docker spun up an instance of the whalesay image, ran an empty command, and then exited once that was complete.

Let’s try running a container again, this time adding the cowsay command at the end.

> docker run docker/whalesay cowsay ""hi there""

 __________ 
< hi there >
 ---------- 
 \
 \
 \ 
 ## . 
 ## ## ## == 
 ## ## ## ## === 
 /""""""""""""""""""""""""""""""""___/ === 
 ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ / ===- ~~~ 
 \______ o __/ 
 \ \ __/ 
 \____\______/",basics-example
7,https://learning.rc.virginia.edu/notes/containers/basics-webapps/,"Running WebApps in a Container

Just like with the whalesay/cowsay program, we can run web apps in a container. Let’s try with this static website example.

1. Pull the nginx image

> docker pull nginx

2. Run the nginx container

We can use -p to specify a custom port to connect to our container. In this case we are using port 8080.

> docker run -p 8080:80 nginx

We can see that the container is running when we go to 

http://localhost:8080
 in the browser.

When you’re done, you can use Ctrl + C to stop the container.",basics-webapps
8,https://learning.rc.virginia.edu/notes/containers/basics-dockerfile/,"Building a Docker Image

In order to serve our own webapp in a container, we will need to build an image for it. There are many “blank” images like the nginx container we pulled earlier that we can use as a starting point. This is called a base image.

To create our image, we will first write a Dockerfile. A Dockerfile is a text file containing the commands we will use to build the environment we need for our app. These are very similar to commands we would use to install libraries and packages that we need locally.

Once complete, we will use the 
docker build
 and 
docker push
 commands to build our image and upload it to DockerHub.",basics-dockerfile
9,https://learning.rc.virginia.edu/notes/containers/shinyapp/,"Serving a ShinyApp

In this section of the workshop, we will take a completed ShinyApp and create a Docker image for it by writing a Dockerfile. We will then run the container to make sure that the ShinyApp is working as expected. Once we know the container is working, we will create a GitHub repository for our Shiny code and Dockerfile.

To complete this section on your own, you will need:

Docker Desktop installed on your machine
The installers and installation instructions can be found here: 
https://docs.docker.com/engine/install/

A GitHub account
If you don’t have one already you can make one here: 
https://github.com/

A copy of the Shiny code
You can clone a copy of the code to your local machine using 
git clone https://github.com/uvarc/chickweight",shinyapp
10,https://learning.rc.virginia.edu/notes/containers/shinyapp-dockerfile/,"Writing the Dockerfile

Below is the Dockerfile that we will use to build the container for our Chick Weight app. Each line is a command for building our environment and corresponds to a different layer of our image. We will cover each section below.

1. Choose a base image

# Install R version 4.1.2
FROM r-base:4.1.2

In this section we are specifying that we are starting with the r-base Docker image. The r-base container uses Ubuntu and already has R installed, so we don’t need to worry about installing that ourselves. There are many other base containers out there that you can use depending on what kind of app you’re developing.

2. Install Ubuntu packages and libraries

The following packages and libraries will allow us to install Shiny server and various R packages that we need for our app. This list will cover most of your bases for most Shiny apps. If you find you need additional libraries, you can just add them to this list.

How do you know if you’re missing a library? You’ll get an error message, and we will cover how to debug in a later section.

# Install Ubuntu packages
RUN apt-get update && apt-get install -y \
 sudo \
 gdebi-core \
 pandoc \
 libcurl4-gnutls-dev \
 libcairo2-dev/unstable \
 libxt-dev \
 libssl-dev \
 libxml2-dev \
 libnlopt-dev \
 libudunits2-dev \
 libgeos-dev \
 libfreetype6-dev \
 libpng-dev \
 libtiff5-dev \
 libjpeg-dev \
 libgdal-dev \
 git 

3. Install Shiny server

This just installs Shiny server in your image. If you’re not developing a Shiny app, no need to include it. If you 
are
 developing a Shiny app, no need to change it!

# Install Shiny server
RUN wget --no-verbose https://s3.amazonaws.com/rstudio-shiny-server-os-build/ubuntu-12.04/x86_64/VERSION -O ""version.txt"" && \
 VERSION=$(cat version.txt) && \
 wget ""https://s3.amazonaws.com/rstudio-shiny-server-os-build/ubuntu-12.04/x86_64/shiny-server-$VERSION-amd64.deb"" -O ss-latest.deb && \
 gdebi -n ss-latest.deb && \
 rm -f version.txt ss-latest.deb

4. Install R Packages

Here we are installing all the packages that we need for our Shiny app. Again, if you’re not developing a Shiny app, you can skip this part.

##### Install R packages that are required ######
## CRAN packages
RUN R -e ""install.packages(c('shiny','shinydashboard','dplyr','ggplot2','fresh'))""

5. Copy configuration files to the Docker image

These are just some files that make our Shiny app run. These will be in the directory that your app is in. These will be the same for all Shiny apps.

# Copy configuration files into the Docker image
COPY shiny-server.conf /etc/shiny-server/shiny-server.conf
COPY shiny-server.sh /usr/bin/shiny-server.sh
RUN rm -rf /srv/shiny-server/*

6. Copy your code to your app

Ideally your code will be maintained within a GitHub repository (we will cover how to do this in a later section). Here we are cloning the GitHub repo and copying the contents to the shiny-server folder.

# Get the app code
RUN git clone https://github.com/uvarc/chickweight.git
COPY chickweight/* /srv/shiny-server/
RUN rm -rf chickweight

7. Some R and Shiny Stuff

This is just some stuff for setting R paths, etc.

# Make the ShinyApp available at port 80
ENV R_HOME=/usr/lib/R
ENV PATH=/usr/lib/R:/usr/lib/R/bin:$PATH
EXPOSE 80
WORKDIR /srv/shiny-server
RUN chown shiny.shiny /usr/bin/shiny-server.sh && chmod 755 /usr/bin/shiny-server.sh

8. Run the Shiny app!

The CMD just tells the container what to run once it starts. This line starts up the Shiny server and app.

# Run the server setup script
CMD [""/usr/bin/shiny-server.sh""]

Once we’re done writing the Dockerfile, we save it as “Dockerfile” (no file extension).",shinyapp-dockerfile
11,https://learning.rc.virginia.edu/notes/containers/shinyapp-dockerbuild/,"Building the App Image

Now that we’ve written the Dockerfile, it’s time to build our image! To do that, we will use the 
docker build
 command.

In the same directory that your Dockerfile is in, you can run the following:

docker build -t 
/
:
 .

-t
 lets us specify the tag name for this image.

dockerhub-username
 is pretty self-explanatory.

image-name
 is the name for our image. It will also be the name of the image repository in DockerHub.

tag",shinyapp-dockerbuild
12,https://learning.rc.virginia.edu/notes/containers/shinyapp-debugging/,"Running and Debugging

Running the Container

Before we do anything else with our new Docker image, we want to make sure it runs correctly locally.

To run the container, we will use the following command.

docker run -p 8080:80 
/
:

With 
-p 8080:80
, we are mapping port 80 of the container to port 8080 of our local machine. When we want to preview our app, we will go to 

localhost:8080
 in our web browser. You don’t have to use 8080, you can use another number if you want.

Debugging

What if there’s something wrong with the image for our Shiny app? How will we know? If there’s an error, we’ll see this message:

How do we go about debugging this? We’ll need to take a peek into our app. We will use 
docker run
 like before, but this time we will run the container interactively.

docker run -it -p 8888:80 
/
:
 /bin/bash

-it
 allows us to run the container interactively

With 
/bin/bash
, we are entering the container in a bash shell.

We use port 8888 instead of 8080, because we need to restart Docker Desktop in order to use 8080 again.

When we try going to 

localhost:8888
, the app isn’t running yet. We had a command at the end of our Dockerfile to start up Shiny server and run our app, but we just replaced that with 
/bin/bash
. So within our new container, let’s run 
/usr/bin/shiny-server.sh
.

Now we see that error message again when we reload the page in the browser. Hit 
Ctrl + C
 to stop running the app.

Navigate to 
/var/log/shiny-server
. Here you will see log files–use the 
cat
 command to take a look at them. In this example, we are missing the 
fresh
 package from our Docker image. We need to add that to our Dockerfile and rebuild the image.",shinyapp-debugging
13,https://learning.rc.virginia.edu/notes/containers/shinyapp-dockerpush/,"Pushing our Image to a Container Registry

Once our container runs successfully, we can push it to a container registry so that others can pull the container. “Others” includes our Kubernetes cluster at UVA.

We have a few options for container registries. The two main options are DockerHub and GitHub Container Registry (ghcr.io).

For this workshop, we’re going to use GHCR. The main benefit of using GHCR over DockerHub is that it is less restrictive with how many times your image can be pulled in an hour.

Re-tagging our image

To use GHCR, we need to prepend our image name with 
ghcr.io/

. That means we will need to re-tag our image. We can do that with the 
docker tag
 command.

docker tag cagancayco/chickweight:latest ghcr.io/uvarc/chickweight

Allowing Docker to push to GHCR

If this is your first time using GHCR, it is likely that you need to authorize your local Docker installation to push to GitHub.

Go to GitHub -> Settings -> Developer Settings -> Personal Access Tokens, or click 

here
.

Generate new token with read/write permissions for packages.

Copy the token to the clipboard.

In your terminal, run

docker login ghcr.io -u 
 -p 

Now we can use 
docker push
 to push our container to GitHub!

docker push ghcr.io/uvarc/chickweight

Set the package to public

By default, GHCR packages (or images) are set to private. We need them to be public in order for the Kubernetes cluster to see it. To change the visibility, do the following:

Go to Packages -> chickweight -> Package Settings

Click “change visibility” and follow the on-screen instructions.",shinyapp-dockerpush
14,https://learning.rc.virginia.edu/notes/containers/github/,"Version Control

Tools like Git and GitHub are great keeping track of changes in our app. They also allow for easy collaboration and sharing of code.

Another great functionality of GitHub is GitHub Actions (GHA). GHA detect updates pushed to your repository and can kick off workflows automatically. For example, if we make updates to our Shiny code and push them to our repository, GHA can automatically rebuild our Docker image and push the new image to GHCR. This means we don’t have to manually go through the whole rebuild+push process ourselves!

To take advantage of this, we will need to:

Create a new GitHub repository for our Shiny App

Add the Dockerfile to the GitHub repo.

Set up a workflow for rebuilding the container whenever there is a new commit.",github
15,https://learning.rc.virginia.edu/notes/containers/github-newrepo/,"Creating a New GitHub Repository

There are several ways to create a new GitHub repository. Here is one way I like to do it:

Create a new repository with the “New repository” button.

Fill out the “Repository name”.

Select “Add a README file”.

Click “Create repository”.

In your local terminal, clone the new repository with the following command:

git clone https://github.com/
/

Copy or move the files you want to the 
 folder.

Run the following code to add the new files to your GitHub repository:

cd /path/to/

 
git add *
 
git commit -m ""adding files""
 
git push",github-newrepo
16,https://learning.rc.virginia.edu/notes/containers/github-commands/,"Common Git Commands

As we make changes to our Shiny app or Dockerfile, we will need to push the updates to our GitHub repository. Typically this is done with a 
git add
 + 
git commit
 + 
git push
.

git add 

: 
git add
 is similar to packing a box. We are adding the files that we want to send up to our repository.

git commit -m 

: With 
git commit
 we are creating a “packing slip” for our box of updated files. We can add a message that tells us and others why we’re pushing these updates and what they do. Your message can be vague or informative–the choice is up to you.

git push
: This command is doing the actual “shipping” of our files.

If we are working with collaborators, another useful command is 
git pull
. This allows us to update our local repository with any updates our friends have pushed.",github-commands
17,https://learning.rc.virginia.edu/notes/containers/github-actions/,"GitHub Actions

GitHub Actions allow us to incorporate 
Continuous Integration/Continuous Deployment
 in our repository. We can automatically rebuild and redeploy our app whenever any changes are committed to the repo.

To add a workflow to your repo:

Create a 
.github/workflows
 directory.

Add the following .YAML file to the new directory, replacing the 
IMAGE_NAME
 and 
SVC_NAME
 with your image’s name and the name that you want for your app on the Kubernetes cluster, respectively.

name: Container Build CICD

on:
 push:
 branches:
 - 'main'

env:
 # The preferred container registry
 REGISTRY: ghcr.io
 # The base org/image-name for the container
 IMAGE_NAME: uvarc/chickweight
 # A service name if mapping this to a k8s deployment
 SVC_NAME: chickWeight

jobs:
 build:
 runs-on: ubuntu-latest
 steps:
 - uses: actions/checkout@v2
 - name: Set ENV
 run: echo ""IMAGE_TAG=${GITHUB_REF#refs/*/}"" >> $GITHUB_ENV
 -
 name: Set up QEMU
 uses: docker/setup-qemu-action@v1
 -
 name: Set up Docker Buildx
 uses: docker/setup-buildx-action@v1
 -
 # GHCR require a GitHub username and a Personal Access Token with the right permissions.
 # These can be stored as repository secrets in the repo settings.
 name: Login to GHCR
 uses: docker/login-action@v1
 with:
 registry: ghcr.io
 username: ${{ secrets.GHCR_USERNAME }}
 password: ${{ secrets.GHCR_PAT }}
 -
 name: Build and push
 id: docker_build
 uses: docker/build-push-action@v2
 with:
 push: ${{ github.event_name != 'pull_request' }}
 tags: ghcr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
 labels: ${{ steps.meta.outputs.labels }}
 -
 name: Image digest
 run: echo ${{ steps.docker_build.outputs.digest }}

 # Now update another repo so that ArgoCD can deploy the new version.
 # Note that the dispatch call simply curls a POST payload to another repository with JSON that you define.
 - name: Remote Dispatch
 run: |
 curl -X POST https://api.github.com/repos/uvarc/uvarc-services/dispatches \
 -H 'Accept: application/vnd.github.everest-preview+json' \
 -H ""Authorization: token ${{ secrets.GHCR_PAT }}"" \
 --data '{""event_type"": ""${{ env.IMAGE_NAME }} update to ${{ env.IMAGE_TAG }}"", ""client_payload"": { ""service"": ""${{ env.SVC_NAME }}"", ""version"": ""${{ env.IMAGE_TAG }}"" }}'",github-actions
